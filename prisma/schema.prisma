
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Address {
  id                  Int                  @id @default(autoincrement())
  addressLine1        String?
  addressLine2        String
  deliveryNotes       String?
  city                String
  state               String
  zip                 String
  userId              Int?
  user                User?                @relation(fields: [userId], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  latitude            Float?               // Created using GoogleAPI Call during address creation   
  longitude           Float?               // Created using GoogleAPI Call during address creation   
  billingAddresses    BillingAddress[]
  deliveryAddresses   DeliveryAddress[]
  orders              Order[]
  store               Store?
  company             Company?
}

model BillingAddress {
  id                  Int             @id @default(autoincrement())
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  addressId           Int
  address             Address         @relation(fields: [addressId], references: [id])
  paymentMethodId     Int
  paymentMethod       PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
}

model Company {
  id              Int           @id @default(autoincrement())
  name            String    
  description     String?   
  addressId       Int           @unique
  address         Address       @relation(fields: [addressId], references: [id])
  stores          Store[]   
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isDeleted       Boolean       @default(false)
}

model Delivery {
  id                  Int               @id @default(autoincrement())
  orderId             Int               @unique
  order               Order             @relation(fields: [orderId], references: [id])
  deliveryDriverId    Int
  deliveryDriver      DeliveryDriver    @relation(fields: [deliveryDriverId], references: [id])
  deliveryMethodId    Int
  deliveryMethod      DeliveryMethod    @relation(fields: [deliveryMethodId], references: [id])
  deliveryStatusId    Int
  deliveryStatus      DeliveryStatus    @relation(fields: [deliveryStatusId], references: [id])
}

model DeliveryAddress {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  addressId       Int
  address         Address  @relation(fields: [addressId], references: [id])
}

model DeliveryDriver {
  id              Int   @id @default(autoincrement())
  userId          Int   @unique
  user            User  @relation(fields: [userId], references: [id])
  deliveries      Delivery[]
  orders          Order[]
}

model DeliveryMethod {
  id              Int                   @id @default(autoincrement())
  method          DeliveryMethodType     
  deliveries      Delivery[]
  orders          Order[]
}

enum DeliveryMethodType {
  PICKUP
  DELIVERY
}

model DeliveryPolygon {
  id              Int           @id @default(autoincrement())
  storeId         Int
  store           Store         @relation(fields: [storeId], references: [id])
  polygonJson     String
}

model DeliveryStatus {
  id          Int                   @id @default(autoincrement())
  status      DeliveryStatusEnum
  deliveries  Delivery[]
}

enum DeliveryStatusEnum {
  DELIVERED
  IN_TRANSIT
  PENDING
  CANCELLED
  PICKED_UP
  READY_FOR_PICKUP
}

model Item{
  id                  Int                   @id @default(autoincrement())
  storeId             Int       
  store               Store                 @relation(fields: [storeId], references: [id])
  itemName            String
  itemDesc            String?
  brandName           String?
  type                ItemType
  strainType          StrainType
  containsThc         Boolean
  containsCbd         Boolean
  cbdContent          Float?
  thcContent          Float?
  ItemWeightPrice     ItemWeightPrice[]
  images              ItemImage[]
  orderItems          OrderItem[]
}

enum ItemType {
  Packaged_Flower
  Bulk_Flower
  Edible
  Concentrate
  Cartragidge
  Vaporizer
  Topical
  Preroll
  Accessory
  Other
}

enum StrainType {
  Indica
  Sativa
  Hybrid
  CBD
  Other
}


model ItemImage{
  id              Int            @id @default(autoincrement())
  itemId          Int
  item            Item           @relation(fields: [itemId], references: [id])
  s3Url           String
}

model ItemWeightPrice {
  id              Int            @id @default(autoincrement())
  itemId          Int
  item            Item           @relation(fields: [itemId], references: [id])
  weight          ItemWeight
  price           Decimal
}

enum ItemWeight {
  Preroll
  Gram
  Eighth
  Quarter
  HalfOunce
  Ounce
  Pound
  Package
}

model Message {
  id                      Int                 @id @default(autoincrement())
  messageThreadId         Int
  messageThread           MessageThread       @relation(fields: [messageThreadId], references: [id])
  authorId                Int
  author                  User                @relation("AuthorRelation", fields: [authorId], references: [id])
  recipientId             Int 
  recipient               User                @relation("RecipientRelation", fields: [recipientId], references: [id])
  messageBody             String    
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  deletedAt               DateTime?
  messageReadStatusId     Int
  messageReadStatus       MessageReadStatus   @relation(fields: [messageReadStatusId], references: [id])
}

model MessageReadStatus {
  id                  Int            @id @default(autoincrement())
  messageReadStatus   String
  messages            Message[]
}

model MessageThread {
  id              Int            @id @default(autoincrement())
  orderId         Int
  order           Order          @relation(fields: [orderId], references: [id])
  authorId        Int
  author          User           @relation(fields: [authorId], references: [id])
  messages        Message[]
}

model Order {
  id                      Int               @id @default(autoincrement())
  userId                  Int
  user                    User              @relation(fields: [userId], references: [id])
  storeId                 Int
  store                   Store             @relation(fields: [storeId], references: [id])
  addressId               Int
  address                 Address           @relation(fields: [addressId], references: [id])
  orderStatusId           Int
  orderStatus             OrderStatus       @relation(fields: [orderStatusId], references: [id])
  paymentMethodId         Int
  paymentMethod           PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  paymentStatusId         Int
  paymentStatus           PaymentStatus     @relation(fields: [paymentStatusId], references: [id])
  deliveryDriverId        Int?
  deliveryDriver          DeliveryDriver?   @relation(fields: [deliveryDriverId], references: [id])         
  storeTaxId              Int
  storeTax                StoreTax          @relation(fields: [storeTaxId], references: [id])
  deliveryMethodId        Int
  deliveryMethod          DeliveryMethod    @relation(fields: [deliveryMethodId], references: [id])
  deliveryFee             Decimal 
  deliveryTip             Decimal 
  requestedTime           DateTime  
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  orderTotal              Decimal
  delivery                Delivery?
  messageThreads          MessageThread[]
  orderItems              OrderItem[]
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  itemId        Int
  item          Item         @relation(fields: [itemId], references: [id])
  orderId       Int?
  order         Order?        @relation(fields: [orderId], references: [id])
  itemQuantity  Int
  itemWeight    ItemWeight
  itemPrice     Decimal
}

model OrderStatus {
  id              Int                 @id @default(autoincrement())
  orderStatus     OrderStatusEnum
  orders          Order[]         
}

enum OrderStatusEnum {
  PENDING
  ACCEPTED
  CANCELLED
  OUT_FOR_DELIVERY
  DELIVERED
  READY_FOR_PICKUP
  PICKED_UP
}

model PaymentMethod {
  id                Int    @id @default(autoincrement())
  userId            Int
  user              User   @relation(fields: [userId], references: [id])
  billingAddresses  BillingAddress[]
  orders            Order[]
}

model PaymentStatus {
  id              Int                 @id @default(autoincrement())
  paymentStatus   PaymentStatusType 
  orders          Order[]
}

enum PaymentStatusType {
  SUCCESS
  PENDING
  DECLINED
  REFUNDED
}

model Role {
  id            Int           @id @default(autoincrement())
  role          RoleType      @unique @default(USER)
  storeRoles    StoreRole[]
  userRoles     UserRole[]
}
enum RoleType {
  ADMIN
  USER
  DRIVER
  STORE_EMPLOYEE
  STORE_ADMIN
}

model Store {
  id                  Int                 @id @default(autoincrement())
  name                String      
  addressId           Int                 @unique
  address             Address             @relation(fields: [addressId], references: [id])
  deliveryPolygon     DeliveryPolygon[]
  operatingHours      String
  phoneNumber         String
  items               Item[]
  orders              Order[]
  companyId           Int?
  company             Company?            @relation(fields: [companyId], references: [id])
  storeRoles          StoreRole[]
  storeTax            StoreTax?
  isActive            Boolean             @default(true)
}

model StoreRole {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  storeId         Int
  store           Store       @relation(fields: [storeId], references: [id])
  roleId          Int
  role            Role        @relation(fields: [roleId], references: [id])
}

model StoreTax {
  id        Int     @id @default(autoincrement())
  storeId   Int     @unique
  store     Store   @relation(fields: [storeId], references: [id])
  taxRate   Decimal
  orders    Order[]
}

model User {
  id                    Int                   @id @default(autoincrement())
  firstName             String
  lastName              String
  email                 String                @unique
  password              String
  addresses             Address[]
  userRoles             UserRole[]
  billingAddresses      BillingAddress[]
  deliveryAddresses     DeliveryAddress[]
  paymentMethods        PaymentMethod[]
  orders                Order[]
  messageThreads        MessageThread[]
  authoredMessages      Message[]             @relation("AuthorRelation")
  receivedMessages      Message[]             @relation("RecipientRelation")
  storeRoles            StoreRole[]
  deliveryDriver        DeliveryDriver?
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
}