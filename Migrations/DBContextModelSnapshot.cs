// <auto-generated />
using System;
using Budhub.DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Budhub.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Budhub.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AddressLine1 = "1234 Rabbit Lane",
                            AddressLine2 = "First hole on the left",
                            City = "Acme Acres",
                            CompanyId = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4310),
                            IsActive = true,
                            State = 4,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4310),
                            Zip = "91234"
                        },
                        new
                        {
                            Id = -2,
                            AddressLine1 = "555 S Street Ave",
                            AddressLine2 = "Suite 10",
                            City = "Acme Acres",
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4330),
                            IsActive = true,
                            State = 4,
                            StoreId = -1,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4330),
                            Zip = "91234"
                        },
                        new
                        {
                            Id = -3,
                            AddressLine1 = "5678 Side St",
                            AddressLine2 = "Apt 200",
                            City = "Denver",
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4330),
                            DeliveryNotes = "Door Code: 5678",
                            IsActive = true,
                            State = 5,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4330),
                            UserId = -2,
                            Zip = "66666"
                        });
                });

            modelBuilder.Entity("Budhub.Models.BillingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("Budhub.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5010),
                            Description = "Eh... what's up doc?",
                            IsActive = true,
                            Name = "Acme Herbal Delights",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5010)
                        });
                });

            modelBuilder.Entity("Budhub.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryDriverId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDriverId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DeliveryDriver");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5090),
                            IsActive = true,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5090),
                            UserId = -3
                        });
                });

            modelBuilder.Entity("Budhub.Models.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryMethodType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryPolygon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PolygonJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("DeliveryPolygons");
                });

            modelBuilder.Entity("Budhub.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("CbdContent")
                        .HasColumnType("double precision");

                    b.Property<bool?>("ContainsCbd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ContainsThc")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemDesc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<int?>("Strain")
                        .HasColumnType("integer");

                    b.Property<double?>("ThcContent")
                        .HasColumnType("double precision");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BrandName = "Some Name",
                            ContainsCbd = false,
                            ContainsThc = true,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4400),
                            IsActive = true,
                            ItemDesc = "This is a description",
                            ItemName = "Purple Haze",
                            StoreId = -2,
                            Strain = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4400)
                        },
                        new
                        {
                            Id = -2,
                            BrandName = "Some Name",
                            ContainsCbd = false,
                            ContainsThc = true,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4430),
                            IsActive = true,
                            ItemDesc = "This is a description",
                            ItemName = "Sour Diesel",
                            StoreId = -2,
                            Strain = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4430)
                        });
                });

            modelBuilder.Entity("Budhub.Models.ItemWeightPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemWeightPrice");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4680),
                            IsActive = true,
                            ItemId = -1,
                            Price = 10.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4680),
                            Weight = 1
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4810),
                            IsActive = true,
                            ItemId = -1,
                            Price = 35.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4810),
                            Weight = 2
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4810),
                            IsActive = true,
                            ItemId = -1,
                            Price = 60.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4810),
                            Weight = 3
                        },
                        new
                        {
                            Id = -4,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4820),
                            IsActive = true,
                            ItemId = -1,
                            Price = 100.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4820),
                            Weight = 4
                        },
                        new
                        {
                            Id = -5,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4820),
                            IsActive = true,
                            ItemId = -1,
                            Price = 180.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4820),
                            Weight = 5
                        },
                        new
                        {
                            Id = -6,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4830),
                            IsActive = true,
                            ItemId = -2,
                            Price = 10.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4830),
                            Weight = 1
                        },
                        new
                        {
                            Id = -7,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4830),
                            IsActive = true,
                            ItemId = -2,
                            Price = 35.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4830),
                            Weight = 2
                        },
                        new
                        {
                            Id = -8,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4830),
                            IsActive = true,
                            ItemId = -2,
                            Price = 60.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4830),
                            Weight = 3
                        },
                        new
                        {
                            Id = -9,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4840),
                            IsActive = true,
                            ItemId = -2,
                            Price = 100.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4840),
                            Weight = 4
                        },
                        new
                        {
                            Id = -10,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4840),
                            IsActive = true,
                            ItemId = -2,
                            Price = 180.0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4840),
                            Weight = 5
                        });
                });

            modelBuilder.Entity("Budhub.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeliveryDriverId")
                        .HasColumnType("integer");

                    b.Property<double>("DeliveryFee")
                        .HasColumnType("double precision");

                    b.Property<int?>("DeliveryMethodId")
                        .HasColumnType("integer");

                    b.Property<double>("DeliveryTip")
                        .HasColumnType("double precision");

                    b.Property<int>("FulfillmentMethod")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("double precision");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreTaxId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DeliveryDriverId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreTaxId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AddressId = -3,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4370),
                            DeliveryDriverId = -1,
                            DeliveryFee = 4.9900000000000002,
                            DeliveryTip = 0.0,
                            FulfillmentMethod = 0,
                            IsActive = true,
                            OrderStatus = 0,
                            OrderTotal = 0.0,
                            PaymentStatus = 0,
                            RequestedTime = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4380),
                            StoreId = -2,
                            StoreTaxId = -2,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4380),
                            UserId = -2
                        });
                });

            modelBuilder.Entity("Budhub.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4440),
                            IsActive = true,
                            ItemId = -1,
                            OrderId = -1,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4440)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4440),
                            IsActive = true,
                            ItemId = -2,
                            OrderId = -1,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4440)
                        });
                });

            modelBuilder.Entity("Budhub.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Budhub.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Budhub.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4340),
                            IsActive = true,
                            RoleType = 0,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4340)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4340),
                            IsActive = true,
                            RoleType = 4,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4340)
                        });
                });

            modelBuilder.Entity("Budhub.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CompanyId = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5020),
                            IsActive = true,
                            Name = "Smoke Shop",
                            OperatingHours = "9:00 AM - 5:00 PM",
                            PhoneNumber = "555-555-5555",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5020)
                        },
                        new
                        {
                            Id = -2,
                            CompanyId = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5020),
                            IsActive = true,
                            Name = "Canni Shop",
                            OperatingHours = "9:00 AM - 5:00 PM",
                            PhoneNumber = "666-666-6666",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5020)
                        });
                });

            modelBuilder.Entity("Budhub.Models.StoreRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreRoles");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4350),
                            IsActive = true,
                            RoleId = -1,
                            StoreId = -2,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4350),
                            UserId = -1
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4350),
                            IsActive = true,
                            RoleId = -2,
                            StoreId = -2,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 40, 78, DateTimeKind.Utc).AddTicks(4350),
                            UserId = -4
                        });
                });

            modelBuilder.Entity("Budhub.Models.StoreTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("StoreTaxes");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5030),
                            IsActive = true,
                            StoreId = -1,
                            TaxRate = 7.5,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5030)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5030),
                            IsActive = true,
                            StoreId = -2,
                            TaxRate = 7.5,
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5030)
                        });
                });

            modelBuilder.Entity("Budhub.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5060),
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAELgIkJ1f3GPaNSIMSsTkKeBmHqdNcu+OP73B5yzt7YF81/0gpVJe4b8xwbnCcJRcXQ==",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5060)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5070),
                            Email = "end@mail.com",
                            EmailConfirmed = false,
                            FirstName = "End",
                            IsActive = true,
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAEJ/EZ2zvGs+vvEobVdNy6ynHreRWBUAc9h5/gRCAWp8RX8nkYsROv2NPVAnzK3WLJA==",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5070)
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5070),
                            Email = "driver@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Driver",
                            IsActive = true,
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAECYqcvNiBYfP6Fm1OuR5QLx5Z3ywobcWYlyWWA2QDN/0NoVWMr8MLLWcfDtYdWhfBQ==",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5070)
                        },
                        new
                        {
                            Id = -4,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5080),
                            Email = "store_emp@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Store Employee",
                            IsActive = true,
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAEKqF/Ha74X7sT4Zby8zvMVZVy1nR483HSWOI4IcRAPUk8YaKS4S/FZ5h2eqKuTcXGw==",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5080)
                        },
                        new
                        {
                            Id = -5,
                            CreatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5080),
                            Email = "store_admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Store Admin",
                            IsActive = true,
                            LastName = "User",
                            Password = "AQAAAAIAAYagAAAAEIiMR6WUYGnOv2+bFDuU5iRZUISfHdpl49MoUPNKq6fKEINk2AbtRhOVymuyzIQolw==",
                            UpdatedAt = new DateTime(2023, 9, 30, 3, 46, 39, 361, DateTimeKind.Utc).AddTicks(5080)
                        });
                });

            modelBuilder.Entity("Budhub.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Budhub.Models.Address", b =>
                {
                    b.HasOne("Budhub.Models.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("Budhub.Models.Address", "CompanyId");

                    b.HasOne("Budhub.Models.Store", "Store")
                        .WithOne("Address")
                        .HasForeignKey("Budhub.Models.Address", "StoreId");

                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.BillingAddress", b =>
                {
                    b.HasOne("Budhub.Models.Address", "Address")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.Delivery", b =>
                {
                    b.HasOne("Budhub.Models.DeliveryDriver", "DeliveryDriver")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.DeliveryMethod", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("Budhub.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryDriver");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryAddress", b =>
                {
                    b.HasOne("Budhub.Models.Address", "Address")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryDriver", b =>
                {
                    b.HasOne("Budhub.Models.User", "User")
                        .WithOne("DeliveryDriver")
                        .HasForeignKey("Budhub.Models.DeliveryDriver", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryPolygon", b =>
                {
                    b.HasOne("Budhub.Models.Store", "Store")
                        .WithOne("DeliveryPolygon")
                        .HasForeignKey("Budhub.Models.DeliveryPolygon", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Budhub.Models.Item", b =>
                {
                    b.HasOne("Budhub.Models.Store", "Store")
                        .WithMany("Items")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Budhub.Models.ItemWeightPrice", b =>
                {
                    b.HasOne("Budhub.Models.Item", "Item")
                        .WithMany("ItemWeightPrice")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Budhub.Models.Order", b =>
                {
                    b.HasOne("Budhub.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.DeliveryDriver", "DeliveryDriver")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.DeliveryMethod", null)
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("Budhub.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.StoreTax", "StoreTax")
                        .WithMany("Orders")
                        .HasForeignKey("StoreTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DeliveryDriver");

                    b.Navigation("Store");

                    b.Navigation("StoreTax");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.OrderItem", b =>
                {
                    b.HasOne("Budhub.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Budhub.Models.PaymentMethod", b =>
                {
                    b.HasOne("Budhub.Models.BillingAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.User", null)
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Budhub.Models.RefreshToken", b =>
                {
                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.Store", b =>
                {
                    b.HasOne("Budhub.Models.Company", "Company")
                        .WithMany("Stores")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Budhub.Models.StoreRole", b =>
                {
                    b.HasOne("Budhub.Models.Role", "Role")
                        .WithMany("StoreRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.Store", "Store")
                        .WithMany("StoreRoles")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany("StoreRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.StoreTax", b =>
                {
                    b.HasOne("Budhub.Models.Store", "Store")
                        .WithOne("StoreTax")
                        .HasForeignKey("Budhub.Models.StoreTax", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Budhub.Models.UserRole", b =>
                {
                    b.HasOne("Budhub.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budhub.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Budhub.Models.Address", b =>
                {
                    b.Navigation("BillingAddresses");

                    b.Navigation("DeliveryAddresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Budhub.Models.Company", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryDriver", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Budhub.Models.DeliveryMethod", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Budhub.Models.Item", b =>
                {
                    b.Navigation("ItemWeightPrice");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Budhub.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Budhub.Models.Role", b =>
                {
                    b.Navigation("StoreRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Budhub.Models.Store", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("DeliveryPolygon");

                    b.Navigation("Items");

                    b.Navigation("Orders");

                    b.Navigation("StoreRoles");

                    b.Navigation("StoreTax");
                });

            modelBuilder.Entity("Budhub.Models.StoreTax", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Budhub.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BillingAddresses");

                    b.Navigation("DeliveryAddresses");

                    b.Navigation("DeliveryDriver");

                    b.Navigation("PaymentMethods");

                    b.Navigation("RefreshTokens");

                    b.Navigation("StoreRoles");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
